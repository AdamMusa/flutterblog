I";}<p><img src="/assets/images/account.jpg" alt="alt text" style="float:left; padding:16px;border-radius:50%;height:100px;" />
<br /> AdamMusa <a href="https://twitter.com/AdamMusaAly/">Follow</a><br />
5,Juin 2020 1min<br /><br /></p>

<p>Cette collection n’est pas exhaustive, c’est juste une brève introduction au langage pour les personnes qui aiment apprendre et faire par la suite Flutter par exemple. Ce tour de langage est bénéfique pour une personne qui n’a encore jamais programmé ou au contraire. Mais pour faire flutter il faut avoir minimum de connaissances en Dart, dans ce didacticiel vous allez avoir cette connaissance et vous apprendrez à voler avec flutter.<br /><strong>Si vous souhaitez exécuter le code, cliquer sur le DartPad ci-haut et coller le code que vous avez copié et clique sur Run ça va exécuter votre code</strong>.
Commençons par un hello world.</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="o">){</span>
    <span class="n">print</span><span class="o">(</span><span class="s">"hello world"</span><span class="o">);</span>
<span class="o">}</span></code></pre></figure>

<p>Tous nos morceaux de codes que ça soit une fonction ,class etc. doivent être appelé dans la main.</p>

<p><strong>Le variable</strong></p>

<p>Même dans le code Dart , la plupart des variables n’ont pas besoin de types explicites, grâce à l’inférence de type:</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kd">var</span> <span class="n">nom</span> <span class="o">=</span> <span class="s">'Flash'</span><span class="o">;</span>
<span class="kd">var</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">23</span><span class="o">;</span>
<span class="n">ou</span> 
<span class="kt">String</span> <span class="n">nom</span> <span class="o">=</span> <span class="s">'Flash'</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">23</span><span class="o">;</span></code></pre></figure>

<p>Si vous voulez déclaration une variable de façon implicite utiliser var sinon utiliser le type de cette variable(si c’est un entier on utilise int,chaine de caractere String).
Comme nom est une constante on peut faire aussi comme ça</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kd">const</span> <span class="n">nom</span> <span class="o">=</span> <span class="s">'Flash'</span><span class="o">;</span>
<span class="n">ou</span>
<span class="kd">final</span> <span class="n">nom</span> <span class="o">=</span> <span class="s">"Flash"</span><span class="o">;</span></code></pre></figure>

<p>Les mots clés final et const sont utilisés pour déclarer des constantes. Dart empêche de modifier les valeurs d’une variable déclarée à l’aide du mot clé final ou const. Ces mots clés peuvent être utilisés conjointement avec le type de données de la variable ou à la place du mot clé var .
Le mot clé const est utilisé pour représenter une constante au moment de la compilation. Les variables déclarées à l’aide du mot clé const sont implicitement finales.</p>

<p><strong>Les Opérateurs et les mots réservés</strong></p>

<p>Dart prend en charge tous les opérateurs arithmétiques. Voici quelques-uns:</p>

<table>
  <thead>
    <tr>
      <th>Opérateur</th>
      <th>La description</th>
      <th>Exemple</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>&gt;</td>
      <td>Plus grand que</td>
      <td>(2&gt; 3) est faux</td>
    </tr>
    <tr>
      <td>&lt;</td>
      <td>Moins que</td>
      <td>(2 &lt; 3 ) est vrai</td>
    </tr>
    <tr>
      <td>&gt; =</td>
      <td>Plus grand ou égal à</td>
      <td>(2&gt; = 3) est faux</td>
    </tr>
    <tr>
      <td>&lt;=</td>
      <td>Inférieur ou égal à</td>
      <td>(2 &lt;= 3) est vrai</td>
    </tr>
    <tr>
      <td>==</td>
      <td>Égalité</td>
      <td>(2 == 3) est faux</td>
    </tr>
    <tr>
      <td>! =</td>
      <td>Inégalité</td>
      <td>int a =2,int b=3(a! = b) est vrai</td>
    </tr>
  </tbody>
</table>

<p><a href="https://dart.dev/guides/language/language-tour/"><strong>voir plus les opérateurs et les mots réservés</strong></a></p>

<p><strong>Structure conditionnelle</strong></p>

<p>Dart prend en charge les instructions de flux de contrôle habituelles:</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="k">if</span> <span class="o">(</span><span class="n">age</span> <span class="o">&gt;</span> <span class="mi">18</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">print</span><span class="o">(</span><span class="s">'Vous etes majeur'</span><span class="o">);</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">age</span> <span class="o">&lt;</span> <span class="mi">18</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">print</span><span class="o">(</span><span class="s">'Vous etes mineur '</span><span class="o">);</span>
<span class="o">}</span>
<span class="k">else</span><span class="o">{</span>
    <span class="n">print</span><span class="o">(</span><span class="s">'Va jouer loin '</span><span class="o">);</span>
<span class="o">}</span></code></pre></figure>

<p><strong>Les boucles</strong></p>

<p>Les boucles sont utilisées pour parcourir les éléments d’une table, d’une collection ou dictionnaire dans certains langages ou des objets dans d’autres. Voilà comment on les utilise:
La boucle for :</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">print</span><span class="o">(</span><span class="s">'MindDev - Dart for Loop'</span><span class="o">);</span>
  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="n">print</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Une liste est une table et on peut récupérer un élément de la sorte</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kt">List</span> <span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">];</span> <span class="c1">//Une list homogène;</span>
<span class="n">print</span><span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span></code></pre></figure>

<p>L’index de la liste commence de 0 à n-1.</p>

<p>La boucle while :</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">print</span><span class="o">(</span><span class="s">'MindDev - Dart for Loop'</span><span class="o">);</span>
  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="k">while</span> <span class="o">(</span><span class="n">i</span><span class="o">&lt;=</span><span class="mi">5</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">print</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
    <span class="n">i</span><span class="o">++;</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>exemple d’une liste hétérogène:</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart">  <span class="kd">dynamic</span> <span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="o">,</span><span class="s">"adam"</span><span class="o">,</span><span class="mf">3.14</span><span class="o">];</span> <span class="c1">//Une list hétérogène;</span>
  <span class="n">print</span><span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span></code></pre></figure>

<p>La boucle do while :</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="o">)</span>
<span class="o">{</span>
    <span class="kd">var</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="kd">var</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
    <span class="n">print</span><span class="o">(</span><span class="s">"MindDev - Dart do while loop"</span><span class="o">);</span>
    <span class="k">do</span><span class="o">{</span>      
        <span class="n">print</span><span class="o">(</span><span class="s">"Hello World! Value is :</span><span class="si">${i}</span><span class="s">"</span><span class="o">);</span>  
        <span class="n">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span><span class="k">while</span><span class="o">(</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">max</span><span class="o">);</span>
<span class="o">}</span></code></pre></figure>

<p>Pour accéder à la valeur de i ont procede de la manière suivante ${ i } ou $i, les deux syntaxes sont valides.</p>

<p>forEach</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="o">)</span> <span class="o">{</span>
  <span class="kd">var</span> <span class="n">list</span> <span class="o">=</span> <span class="o">[</span><span class="s">'apples'</span><span class="o">,</span> <span class="s">'bananas'</span><span class="o">,</span> <span class="s">'oranges'</span><span class="o">];</span><span class="cm">/* équivaut à faire ça List&lt;String&gt; list =  ['apples', 'bananas', 'oranges'];*/</span>
  <span class="n">list</span><span class="o">.</span><span class="na">forEach</span><span class="o">((</span><span class="n">item</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">print</span><span class="o">(</span><span class="s">'</span><span class="si">${list.indexOf(item)}</span><span class="s">: </span><span class="si">$item</span><span class="s">'</span><span class="o">);</span>
  <span class="o">});</span>
<span class="o">}</span></code></pre></figure>

<p>forEach est un itérateur.</p>

<p><strong>Map ou Collection</strong></p>

<p>L’objet Map est une simple paire clé / valeur. Les clés et les valeurs d’une map peuvent être de tout type. Une map est une collection dynamique. En d’autres termes, Maps peut augmenter et diminuer au moment de l’exécution.</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart">  <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="o">)</span> <span class="o">{</span> 
    <span class="kd">var</span> <span class="n">infoUser</span><span class="o">=</span> <span class="o">{</span><span class="s">"name"</span><span class="o">:</span> <span class="s">"adam"</span><span class="o">,</span> <span class="s">'Email'</span><span class="o">:</span> <span class="s">'adammusa2222@gmail.com'</span><span class="o">};</span>
    <span class="n">print</span><span class="o">(</span><span class="n">infoUser</span><span class="o">[</span><span class="s">"name"</span><span class="o">]);</span> 
    <span class="n">infoUser</span><span class="o">.</span><span class="na">forEach</span><span class="o">((</span><span class="n">k</span><span class="o">,</span><span class="n">v</span><span class="o">)</span> <span class="o">=&gt;</span> <span class="n">print</span><span class="o">(</span><span class="s">'</span><span class="si">${k}</span><span class="s">: </span><span class="si">${v}</span><span class="s">'</span><span class="o">));</span> 
  <span class="o">}</span> </code></pre></figure>

<p><strong>Les fonctions</strong></p>

<p>Il est recommandé de spécifier les types d’arguments de chaque fonction et la valeur de retour.
Nous allons implementer une suite de fibonacci.</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="o">){</span>
  <span class="kd">var</span> <span class="n">result</span> <span class="o">=</span> <span class="n">fibonacci</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>
  <span class="n">print</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
<span class="o">}</span>
<span class="kt">int</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
  <span class="k">return</span> <span class="n">fibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">fibonacci</span><span class="o">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="o">);</span>
<span class="o">}</span></code></pre></figure>

<p><strong>Fat Arrow Expression ou Lambda Function Expression ou arrow function</strong> est une syntaxe pour écrire une fonction sur une seule ligne en utilisant la =&gt;syntaxe AKA fat arrow. Cela ressemble à la syntaxe de la fonction ES6 Fat Arrow de JavaScript. Il s’agit d’une façon plus propre d’écrire des fonctions avec une seule instruction.</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="o">){</span>
  <span class="n">print</span><span class="o">(</span><span class="n">result</span><span class="o">(</span><span class="mi">20</span><span class="o">));</span>
<span class="o">}</span>
<span class="kd">var</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="o">=&gt;</span> <span class="n">a</span> <span class="o">*</span> <span class="n">a</span><span class="o">;</span></code></pre></figure>

<p><strong>Quelques methodes que le map et liste qui font en commun</strong></p>

<table>
  <thead>
    <tr>
      <th>#</th>
      <th>Propriete &amp; Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Length, : Renvoie la taille de l’objet</td>
    </tr>
    <tr>
      <td>2</td>
      <td>isEmpty : Renvoie true si l’objet est vide</td>
    </tr>
    <tr>
      <td>3</td>
      <td>isNotEmpty : Renvoie true si l’objet n’est pas vide</td>
    </tr>
    <tr>
      <td>4</td>
      <td>add : Permets d’ajouter un element dans l’objet</td>
    </tr>
    <tr>
      <td>5</td>
      <td>removeAt : Permets de supprimer un element à partir de son index</td>
    </tr>
    <tr>
      <td>6</td>
      <td>clear : Permets de supprimer l’objet</td>
    </tr>
  </tbody>
</table>

<p><strong>ex :</strong></p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="o">)</span> <span class="o">{</span>
  <span class="kt">List</span><span class="o">&lt;</span><span class="kd">dynamic</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="o">[</span><span class="s">'apples'</span><span class="o">,</span> <span class="s">'bananas'</span><span class="o">,</span> <span class="s">'oranges'</span><span class="o">];</span>
  <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
  <span class="n">print</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
  <span class="n">list</span><span class="o">.</span><span class="na">removeAt</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
  <span class="n">print</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
  <span class="n">print</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
  <span class="n">print</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">);</span>
  <span class="n">print</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">isNotEmpty</span><span class="o">);</span>
  <span class="n">list</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
  <span class="n">print</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
<span class="o">}</span></code></pre></figure>

<p><strong>Importations</strong></p>

<p>Se font de la maniere suivante :</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart">  <span class="c1">//Importation d'une bibliothèques</span>
  <span class="kn">import</span> <span class="s">'dart:math'</span><span class="o">;</span>
  <span class="c1">//Importation de bibliothèques à partir de packages externes</span>
  <span class="kn">import</span> <span class="s">'package:test/test.dart'</span><span class="o">;</span>
  <span class="c1">//Importation de fichiers</span>
  <span class="kn">import</span> <span class="s">'chemin/de/la/fichier.dart'</span><span class="o">;</span></code></pre></figure>

<p><strong>Des classes(POO)</strong></p>

<p>Dans la POO, une classe agit comme un type de données abstrait (TDA) pour une instance de cette classe (objet). En Dart, c’est également le cas. La syntaxe de base d’une classe est:</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">NomDeLaClass</span> <span class="o">{</span>
 <span class="n">champs</span><span class="o">;</span>
 <span class="n">getters</span><span class="o">/</span><span class="n">setters</span>
 <span class="n">constructeur</span>
 <span class="n">methodes</span><span class="o">/</span><span class="n">fonctions</span>
<span class="o">}</span></code></pre></figure>

<p><strong>Getter et Setter</strong></p>

<p>Les getters et setters sont des méthodes spéciales qui fournissent un accès en lecture et en écriture aux propriétés d’un objet. Chaque variable d’instance de votre classe a un getter implicite et un setter si nécessaire. Dans Dart, vous pouvez aller encore plus loin en implémentant vos propres getters et setters. 
Commençons.</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="o">)</span> <span class="o">{</span>
 <span class="n">Vehicle</span> <span class="n">car</span> <span class="o">=</span> <span class="n">Vehicle</span><span class="o">(</span><span class="nl">marque:</span><span class="s">"Honda"</span><span class="o">,</span><span class="nl">model:</span><span class="s">"Civic"</span><span class="o">,</span><span class="nl">annee:</span><span class="mi">2018</span><span class="o">,</span>    <span class="nl">couleur:</span><span class="s">"red"</span><span class="o">);</span>
 <span class="n">print</span><span class="o">(</span><span class="n">car</span><span class="o">.</span><span class="na">map</span><span class="o">);</span> <span class="c1">// output - {marque: Honda, model: Civic, annee: 2018, couleur: red}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">Vehicle</span> <span class="o">{</span>
  <span class="kt">String</span> <span class="n">marque</span><span class="o">;</span>
  <span class="kt">String</span> <span class="n">model</span><span class="o">;</span>
  <span class="kt">int</span> <span class="n">annee</span><span class="o">;</span>
  <span class="kt">int</span> <span class="n">vehicleAge</span><span class="o">;</span>
  <span class="kt">String</span> <span class="n">couleur</span><span class="o">;</span>
  <span class="kt">Map</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">,</span><span class="kd">dynamic</span><span class="o">&gt;</span> <span class="kd">get</span> <span class="n">map</span> <span class="o">{</span>
    <span class="k">return</span> <span class="o">{</span>
      <span class="s">"marque"</span><span class="o">:</span> <span class="n">marque</span><span class="o">,</span>
      <span class="s">"model"</span><span class="o">:</span> <span class="n">model</span><span class="o">,</span>
      <span class="s">"annee"</span><span class="o">:</span><span class="n">annee</span><span class="o">,</span>
      <span class="s">"couleur"</span><span class="o">:</span> <span class="n">couleur</span><span class="o">,</span>
    <span class="o">};</span>
  <span class="o">}</span>

  <span class="kt">int</span> <span class="kd">get</span> <span class="n">age</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">DateTime</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">year</span> <span class="o">-</span> <span class="n">annee</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kt">void</span> <span class="kd">set</span> <span class="n">age</span><span class="o">(</span><span class="kt">int</span> <span class="n">anneecourant</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">vehicleAge</span> <span class="o">=</span> <span class="n">anneecourant</span> <span class="o">-</span> <span class="n">annee</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="n">Vehicle</span><span class="o">({</span><span class="k">this</span><span class="o">.</span><span class="na">marque</span><span class="o">,</span><span class="k">this</span><span class="o">.</span><span class="na">model</span><span class="o">,</span><span class="k">this</span><span class="o">.</span><span class="na">annee</span><span class="o">,</span><span class="k">this</span><span class="o">.</span><span class="na">couleur</span><span class="o">,});</span>
<span class="o">}</span></code></pre></figure>

<p><strong>Héritage</strong></p>

<p>Dart a un héritage unique.</p>

<p><strong>ex:</strong></p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">Employee</span> <span class="kd">extends</span> <span class="n">Spacecraft</span> <span class="o">{</span>
  <span class="kt">double</span> <span class="n">salaire</span><span class="o">;</span>
  <span class="n">Employee</span><span class="o">(</span><span class="kt">String</span> <span class="n">nom</span><span class="o">,</span> <span class="kt">String</span> <span class="n">prenom</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">salaire</span><span class="o">)</span>
      <span class="o">:</span> <span class="k">super</span><span class="o">(</span><span class="n">nom</span><span class="o">,</span> <span class="n">prenom</span><span class="o">);</span>
<span class="o">}</span></code></pre></figure>

<p><strong>Mixins</strong></p>

<p>Les mixins sont un moyen de réutiliser du code dans plusieurs hiérarchies de classes. La classe suivante peut agir comme un mixage:</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">Pilote</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="n">astronaute</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
  <span class="kt">void</span> <span class="n">description</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">print</span><span class="o">(</span><span class="s">'Nombre d'</span><span class="nl">astronautes:</span> <span class="n">$astronaute</span><span class="s">');
  }
}</span></code></pre></figure>

<p>Pour ajouter les capacités d’un mixin à une classe, étendez simplement la classe avec le mixin.</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">Employee</span> <span class="kd">extends</span> <span class="n">Person</span> <span class="k">with</span> <span class="n">Pilote</span><span class="o">{</span>
  <span class="c1">// ···</span>
<span class="o">}</span></code></pre></figure>

<p><strong>Interfaces et classes abstraites</strong></p>

<p>Dart n’a pas de interface comme mot clé. Au lieu de cela, toutes les classes définissent implicitement une interface. Par conséquent, vous pouvez implémenter n’importe quelle classe</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kd">class</span> <span class="nc">Employee</span> <span class="kd">implements</span> <span class="n">Pilote</span> <span class="o">{</span>
  <span class="c1">// ···</span>
<span class="o">}</span></code></pre></figure>

<p>Vous pouvez créer une classe abstraite à étendre (ou implémenter) par une classe concrète. Les classes abstraites peuvent contenir des méthodes abstraites (avec des corps vides).</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Description</span> <span class="o">{</span>
  <span class="kt">void</span> <span class="n">descrire</span><span class="o">();</span>

  <span class="kt">void</span> <span class="n">descrire</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">print</span><span class="o">(</span><span class="s">'========='</span><span class="o">);</span>
    <span class="n">descrire</span><span class="o">();</span>
    <span class="n">print</span><span class="o">(</span><span class="s">'========='</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p><strong>Async</strong></p>

<p>Évitez l’enfer de rappel et rendez votre code beaucoup plus lisible en utilisant async et await.</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kd">const</span> <span class="n">uneSeconde</span> <span class="o">=</span> <span class="n">Duration</span><span class="o">(</span><span class="nl">seconds:</span> <span class="mi">1</span><span class="o">);</span>
<span class="c1">// ···</span>
<span class="n">Future</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">&gt;</span> <span class="n">fonctionasync</span><span class="o">(</span><span class="kt">String</span> <span class="n">message</span><span class="o">)</span> <span class="kd">async</span> <span class="o">{</span>
  <span class="k">await</span> <span class="n">Future</span><span class="o">.</span><span class="na">delayed</span><span class="o">(</span><span class="n">uneSeconde</span><span class="o">);</span>
  <span class="n">print</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
<span class="o">}</span></code></pre></figure>

<p>La méthode ci-dessus équivaut à:</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="kd">const</span> <span class="n">uneSeconde</span> <span class="o">=</span> <span class="n">Duration</span><span class="o">(</span><span class="nl">seconds:</span> <span class="mi">1</span><span class="o">);</span>
<span class="c1">// ···</span>
<span class="n">Future</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">&gt;</span> <span class="n">fonctionasync</span><span class="o">(</span><span class="kt">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">Future</span><span class="o">.</span><span class="na">delayed</span><span class="o">(</span><span class="n">uneSeconde</span><span class="o">).</span><span class="na">then</span><span class="o">((</span><span class="n">_</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">print</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
  <span class="o">});</span>
<span class="o">}</span></code></pre></figure>

<p><strong>Exceptions</strong></p>

<p>Pour déclencher une exception, utilisez throw</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="k">if</span> <span class="o">(</span><span class="n">astronaute</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">throw</span> <span class="n">StateError</span><span class="o">(</span><span class="s">"N'est pas un astronaute."</span><span class="o">);</span>
<span class="o">}</span></code></pre></figure>

<p>Pour intercepter une exception, utilisez une try instruction avec on ou catch(ou les deux):</p>

<figure class="highlight"><pre><code class="language-dart" data-lang="dart"><span class="n">main</span><span class="o">()</span> <span class="o">{</span> 
   <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">12</span><span class="o">;</span> 
   <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> 
   <span class="kt">int</span> <span class="n">res</span><span class="o">;</span>  
   
   <span class="k">try</span> <span class="o">{</span> 
      <span class="n">res</span> <span class="o">=</span> <span class="n">x</span> <span class="o">~/</span> <span class="n">y</span><span class="o">;</span> 
   <span class="o">}</span>  
   <span class="kd">on</span> <span class="n">IntegerDivisionByZeroException</span> <span class="k">catch</span><span class="o">(</span><span class="n">e</span><span class="o">)</span> <span class="o">{</span> 
      <span class="n">print</span><span class="o">(</span><span class="n">e</span><span class="o">);</span> <span class="c1">//on affiche l'exception</span>
   <span class="o">}</span> 
<span class="o">}</span> </code></pre></figure>

<p><strong>Conclusion:</strong></p>

<p><strong>Bravo !!!</strong>, vous disposez déjà la base nécessaire pour ne pas se perdre en flutter bien qu’on a brossé le tour de Dart mais si vous souhaitez approfondir votre base en Dart <a href="https://dart.dev/guides/language/language-tour/"><strong>clique ici</strong></a></p>
:ET